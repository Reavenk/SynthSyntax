struct vec2f
{
	float x;
	float y;
	
	vec2f(){}
	
	vec2f(float x, float y)
	{
		this.x = x;
		this.y = y;
	}
	
	vec2f operator + rev (vec2f& v2)
	{
		return vec2f(this.x + v2.x, this.y + v2.y);
	}
	
	vec2f operator - (vec2f& v2)
	{
		return vec2f(this.x - v2.x, this.y - v2.y);
	}
	
	vec2f operator * rev (float f)
	{
		return vec2f(this.x * f, this.y * f);
	}
	
	vec2f operator / (float f)
	{
		return vec2f(this.x / f, this.y / f);
	}
	
	void operator += rev (vec2f& v2)
	{
		this.x += v2.x;
		this.y += v2.y;
	}
	
	void operator -= (vec2f& v2)
	{
		this.x -= v2.x;
		this.y -= v2.y;
	}
	
	void operator *= rev (float f)
	{
		this.x *= f;
		this.y *= f;
	}
	
	void operator /= (float f)
	{
		this.x /= f;
		this.y /= f;
	}
	
	bool operator == (vec2f & v2)
	{
		return 
			v2.x == this.x && 
			v2.y == this.y;
	}
	
	bool operator != (vec2f& v2)
	{
		return 
			v2.x != this.x ||
			v2.y != this.y;
	}
}